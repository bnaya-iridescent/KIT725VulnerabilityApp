/*
* Disclaimer Ref#: Test
* This code is for assessment purposes only. 
* Any reuse of this code without permission is prohibited 
* and may result in academic integrity breach.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TheVunerableApp.Controller;
using TheVunerableApp.DataSource;
using TheVunerableApp.Model;
using TheVunerableApp.View;
using System.Data.SQLite;

namespace TheVunerableApp.TestApp
{
    internal class Test
    {
        //Added over here

        /*
         *  Two Weaknesses identified in this method
         *  
         *  1. 
         *  Identified as CWE-787
         *  1/9/2023 - Identified by  
         *  1/9/2023 - Exploited by 
         *  21/9/2023 - Patched and tested by 
         *  
         *  2. 
         *  Identified as CWE-125
         *  1/9/2023 - Identified by 
         *  1/9/2023 - Exploited by 
         *  21/9/2023 - Patched and tested by 
         *  
         */
        public static void ExploitBounds()
        {
            List<string> ListOfBalances = UserController.ListOfAccountBalance("6763996216");
            Console.WriteLine("printing balances");
            foreach (string balance in ListOfBalances)
            {
                Console.WriteLine(balance);
            }
        }

        /*
        * 4. CWE-522: Insufficiently Protected Credentials
        * Identified as CWE-522
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        */
        public static void CreateUserStoresPasswordPlainText()
        {
            UserController.CreateUser(UserType.Customer, "456-335-1135", "Customer", "user1", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
        }

        /*
        * 3. Missing authentication for critical function
        * Identified as CWE-306 
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        * 
        * 6. Missing Authorization
        * Identfied as C3M-862
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        * 
        * 7. Improper Authentication
        * Identfied as C3M-862
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        * 
        */
        public static void exploitAccountCreation()
        {
            String user1 = UserController.CreateUser(UserType.Customer, "456-335-1135", "Customer", "User2", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            String adminUser = UserController.CreateUser(UserType.Admin, "456-335-1135", "Admin", "User1", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            // try with non admin user with correct username password
            AccountController.CreateSavingsAccount(user1, 2.1, 10000, user1, "plaintextpassword");
            // try with admin user with correct username password
            AccountController.CreateSavingsAccount(user1, 2.1, 10000, adminUser, "plaintextpassword");
            // try with admin user with correct username and incorrect password
            AccountController.CreateSavingsAccount(user1, 2.1, 10000, adminUser, "incorrectpwd");
        }

        /*
        * 8. CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
        * Identified as CWE-200
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        */
        public static void exploitCustomerInfoSearch()
        {
            
        }



        /*
        * 9. CWE-502: Deserialization of Untrusted Data
        * Identified as CWE-502
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        * 
        * 11. CWE-22: Improper Limitation of a Pathname to a Restricted Directory
        * Identified as CWE-22
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        */
        public static void exploitDeserealize()
        {
            LocalStore ls = new LocalStore();
            ls.LoadTransaction("invalidpath");
        }


        /*
        * 10. CWE-476 Null Pointer Dereference
        * Identified as CWE-476
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        */
        public static void exploitNullPointerException()
        {
            LocalStore ls = new LocalStore();
            ls.StoreTransactions(null);
        }

        public static void testSQLINjection()
        {
            string customerId = "admin'--";
            string ConnectionString = "Data Source=VulApp.db";
            string customerQuery = "SELECT Name, SirName, Email, GovId FROM User WHERE UserId = @userId";
            Customer customer = null;

            using (SQLiteConnection conn = new SQLiteConnection(ConnectionString))
            {
                conn.Open();
                using (SQLiteCommand cmd = new SQLiteCommand(customerQuery, conn))
                {
                    cmd.Parameters.AddWithValue("@userId", customerId);

                    using (SQLiteDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            customer = new Customer(reader["GovId"].ToString(), reader["Name"].ToString(),
                                reader["SirName"].ToString(), reader["Email"].ToString(), "*");
                        }
                    }
                }
                conn.Close();
            }
        }
    }
}
