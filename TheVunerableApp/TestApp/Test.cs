/*
* Disclaimer Ref#: Test
* This code is for assessment purposes only. 
* Any reuse of this code without permission is prohibited 
* and may result in academic integrity breach.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TheVunerableApp.Controller;
using TheVunerableApp.DataSource;
using TheVunerableApp.Model;
using TheVunerableApp.View;
using System.Data.SQLite;

namespace TheVunerableApp.TestApp
{
    internal class Test
    {
        //Added over here

        /*
         *  Two Weaknesses identified in this method
         *  
         *  1. 
         *  Identified as CWE-787
         *  1/10/2023 - Identified by Bibek Basnet
         *  1/10/2023 - Exploited by Bibek Basnet
         *  5/10/2023 - Patched and tested by Bibek Basnet
         *  
         *  2. 
         *  Identified as CWE-125
         *  1/10/2023 - Identified by Bibek Basnet
         *  1/10/2023 - Exploited by Bibek Basnet
         *  5/10/2023 - Patched and tested by Bibek Basnet
         *  
         */
        public static void ExploitBounds()
        {
            List<string> ListOfBalances = UserController.ListOfAccountBalance("6763996216");
            Console.WriteLine("printing balances");
            foreach (string balance in ListOfBalances)
            {
                Console.WriteLine(balance);
            }
        }

        /*
        * 4. CWE-522: Insufficiently Protected Credentials
        * Identified as CWE-522
        * 20/09/2023 - Identified by Binaya Panta
        * 20/09/2023 - Exploited by Binaya Panta
        * 25/09/2023 - Patched and tested by Binaya Panta
        */
        public static void CreateUserStoresPasswordPlainText()
        {
            UserController.CreateUser(UserType.Customer, "456-335-1135", "Customer", "user1", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
        }

        /*
        * 3. Missing authentication for critical function
        * Identified as CWE-306 
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        * 6. Missing Authorization
        * Identfied as C3M-862
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        * 7. Improper Authentication
        * Identfied as C3M-287
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        * 15. CWE-276: Incorrect Default Permissions
        * Identified as CWE-276
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        */
        public static void exploitAccountCreation()
        {
            String user1 = UserController.CreateUser(UserType.Customer, "456-335-1135", "Customer", "User2", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            String adminUser = UserController.CreateUser(UserType.Admin, "456-335-1135", "Admin", "User1", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            // try with non admin user with correct username password
            AccountController.CreateSavingsAccount(user1, 2.1, 10000, user1, "plaintextpassword");
            // try with admin user with correct username password
            AccountController.CreateSavingsAccount(user1, 2.1, 10000, adminUser, "plaintextpassword");
            // try with admin user with correct username and incorrect password
            AccountController.CreateSavingsAccount(user1, 2.1, 10000, adminUser, "incorrectpwd");
        }

        /*
        * 12. CWE-20 Improper Input Validation
        * Identified as CWE-20
        * 12/09/2023 - Identified by Diwash Khanal
        * 12/09/2023- Exploited by Diwash Khanal 
        * 22/09/2023 - Patched and tested by Diwash Khanal
        */
        public static void improperInputValidation() {
            // create user without name and password
            String user1 = UserController.CreateUser(UserType.Customer, "456-335-1135", "", "", "h.mcoy@xmen.com", "", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            Console.WriteLine("CreatedUser1-->" + user1);

            //create user with all parameters
            String user2 = UserController.CreateUser(UserType.Customer, "456-335-1135", "Customer", "User2", "h.mcoy@xmen.com", "password12321", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            Console.WriteLine("CreatedUser2 -->" + user2);

        }

        /*
        * 8. CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
        * Identified as CWE-200
        * 10/09/2023 - Identified by Diwash Khanal
        * 10/09/2023- Exploited by Diwash Khanal 
        * 28/09/2023 - Patched and tested by Diwash Khanal
        */
        public static void exploitCustomerInfoSearch()
        {
            String user1 = UserController.CreateUser(UserType.Customer, "456-335-1135", "Customer", "User2", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            String adminUser = UserController.CreateUser(UserType.Admin, "456-335-1135", "Admin", "User1", "h.mcoy@xmen.com", "plaintextpassword", DateTime.Parse("26/06/2018"), Model.Position.none, Model.Role.none, "Sandy Bay", "SB19");
            // try with non admin user
            AccountController.SearchAccountByCustomer("4952954520", user1);
            // try with admin user 
            AccountController.SearchAccountByCustomer("4952954520", adminUser);
        }


        /*
        * 9. CWE-502: Deserialization of Untrusted Data
        * Identified as CWE-502
        *  14/09/2023 - Identified by Diwash Khanal
        *  14/09/2023 - Exploited by Diwash Khanal
        *  23/09/2023 - Patched and tested by Diwash Khanal
        * 
        * 11. CWE-22: Improper Limitation of a Pathname to a Restricted Directory
        * Identified as CWE-22
        *  14/09/2023 - Identified by Diwash Khanal
        *  14/09/2023 - Exploited by Diwash Khanal
        *  23/09/2023 - Patched and tested by Diwash Khanal
        * 
        * 13. CWE-59: Improper Link Resolution Before File Access ('Link Following')
        * Identified as CWE-59
        *  14/09/2023 - Identified by Diwash Khanal
        *  14/09/2023 - Exploited by Diwash Khanal
        *  23/09/2023 - Patched and tested by Diwash Khanal
        */
        public static void exploitDeserealize()
        {
            LocalStore ls = new LocalStore();
            ls.LoadTransaction("invalidpath");
        }


        /*
        * 10. CWE-476 Null Pointer Dereference
        * Identified as CWE-476
        * 22/09/2023 - Identified by Bibek Basnet
        * 23/09/2023- Exploited by Bibek Basnet 
        * 05/10/2023 - Patched and tested by Bibek Basnet
        */
        public static void exploitNullPointerException()
        {
            LocalStore ls = new LocalStore();
            ls.StoreTransactions(null);
        }

        /*
        * 5. Use of hard coded credentials
        * username and password are hard coded
        * Identified as CWE-798
        * 25/09/2023 - Identified by Bibek Basnet
        * 25/09/2023 - Exploited by Bibek Basnet
        * 3/10/2023 - Patched and tested by Bibek Basnet
        * 
        */
        public static void useOfHardCodedCred() 
        {
            // credentials were hardcoded in the code, so environment variables used instead for security.
        }

        /*
        * 14. CWE-688 Exposure of Resource to Wrong Sphere
        * Identified as CWE-688
        * 28/09/2023 - Identified by Bibek Basnet
        * 28/09/2023- Exploited by Bibek Basnet
        * 29/10/2023 - Patched and tested by Bibek Basnet
        */
        public static void exposePath()
        {
            string exposedPath = TransactionController.getTRPath();
            System.Console.WriteLine(exposedPath);
        }

        // helper method to check list string content to debug
        public static void printList(List<String> listString)
        {
            if (listString.Count > 0)
            {
                Console.WriteLine("List items:");
                foreach (string str in listString)
                {
                    Console.WriteLine(str);
                }
            }
            else
            {
                Console.WriteLine("The list is empty.");
            }
        }
    }
}
