/*
* Disclaimer Ref#: 2023S2735-0-jR0L2p9QsVxGcY2uM5BfD5nHw
* This code is for assessment purposes only. 
* Any reuse of this code without permission is prohibited 
* and may result in academic integrity breach.
*/


using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TheVunerableApp.DataSource;
using TheVunerableApp.Model;

namespace TheVunerableApp.Controller
{
    public static class AccountController
    {
        /*
        * 3. Missing authentication for critical function
        * Identified as CWE-306 
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        * 6. Missing Authorization
        * Identfied as C3M-862
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        * 7. Improper Authentication
        * Identfied as C3M-287
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        * 15. CWE-276: Incorrect Default Permissions
        * Identified as CWE-276
        * 10/09/2023 - Identified by Binaya Panta
        * 10/09/2023 - Exploited by Binaya Panta
        * 15/09/2023 - Patched and tested by Binaya Panta
        * 
        */
        /* old code commented
        public static Account CreateSavingsAccount(String customerId, double interestRate, double balance)
        */
        // to preserve old code functionality old method kept which calls new mthod with username and password blank
        public static Account CreateSavingsAccount(String customerId, double interestRate, double balance) {
            CreateSavingsAccount(customerId, interestRate, balance , "", "");
            return null;
        }
        public static Account CreateSavingsAccount(String customerId, double interestRate, double balance, String loggedInUserId, String password)
        {
            Savings savings = new Savings(balance, interestRate, customerId);
            SQLiteDB db = new SQLiteDB();
            // new code to validate if the logged in user is authorized to create account
            // Assumption is only admin users are able to create account
            if (db.getAuthForTest(loggedInUserId, password) == true)
            {
                Console.WriteLine("Wohooo! You are authorized to create Account");
                db.CreateAccountInDB(savings, 1);
            } else
            {
                Console.WriteLine("You are not authorized to create Account");
            }
            //db.CreateAccountInDB(savings, 1); old code
            return null;
        }

        public static Account CreateCurrentAccount(string customerId, double initBalance, double minBalance, double fee)
        {
            Current current = new Current(initBalance,minBalance,fee,customerId);
            SQLiteDB db = new SQLiteDB();
            db.CreateAccountInDB(current, 0);
            return null;
        }

        public static string CloseAccount(string customerId, string accountNumber) 
        { 
            SQLiteDB db = new SQLiteDB();
            db.CloseAccount(accountNumber);
            accountNumber = null; 
            return accountNumber; 
        }

        /*
        * 8. CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
        * Identified as CWE-200
        * 10/09/2023 - Identified by Diwash Khanal
        * 10/09/2023- Exploited by Diwash Khanal 
        * 28/09/2023 - Patched and tested by Diwash Khanal
        * 
        */
        /* old code commented
        public static List<string> SearchAccountByCustomer(string customerId) 
        */
        public static List<string> SearchAccountByCustomer(string customerId, String loggedInUserId)
        {
            SQLiteDB db = new SQLiteDB();
            // authorize only for admins to search all customer info
            if(db.authorizeForAdminsOnly(loggedInUserId))
            {
                Console.WriteLine("Wohooo! You authorized to search Account");
                return db.GetAllAccountsFromDB(customerId);
            } else
            {
                Console.WriteLine("OOps! You are not authorized to search Account");
                return null;
            }
           //return db.GetAllAccountsFromDB(customerId);
        }
        public static void AddCustomerToAnAccount(string accountNumber, string customerId) 
        { 
            SQLiteDB db = new SQLiteDB();
            db.AddCustomerToAnAccount(accountNumber, customerId);
        }

        public static double GetAccountBalance(string accountNumber)
        {
            SQLiteDB dB = new SQLiteDB();
            return dB.GetBalance(accountNumber);
        }

    }
}
