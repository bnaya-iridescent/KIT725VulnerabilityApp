/*
* Disclaimer Ref#: 2023S2735-0-jR0L2p9QsVxGcY2uM5BfD5nHw
* This code is for assessment purposes only. 
* Any reuse of this code without permission is prohibited 
* and may result in academic integrity breach.
*/

using Microsoft.SqlServer.Server;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Threading.Tasks;
using TheVunerableApp.DataSource;
using TheVunerableApp.Model;

namespace TheVunerableApp.Controller
{
    public static class UserController
    {
        /*
        * 12. CWE-20 Improper Input Validation
        * Identified as CWE-20
        * 12/09/2023 - Identified by Diwash Khanal
        * 12/09/2023- Exploited by Diwash Khanal 
        * 22/09/2023 - Patched and tested by Diwash Khanal
        */
        public static string CreateUser(UserType type, string govId, string name, string sName, string email, string password, DateTime startDate, Position position, Role role, string branchName, string branchId)
        {
            // aded code {start}
            // added new codes to validate input
            //1. check if type, name, sname and password are provided
            if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(sName) || string.IsNullOrWhiteSpace(password) || type == 0)
            {
                Console.WriteLine("All name, sname, password and type must be provided");
                return null;
            }
            else if (ValidateEmail(email) == false)
            {
                Console.WriteLine("Invalid email address provided");
            }
            // aded code {end}

            SQLiteDB sql = new SQLiteDB(); 
            if (type == UserType.Admin) // Admin
            {
                Admin admin = new Admin(govId, name, sName, email, password, startDate, position, role, branchName, branchId);
                sql.CreateUserInDB(admin, 1);
                return admin.AdminId;
            }
            // else a Customer
            Customer customer = new Customer(govId, name, sName, email, password);
            sql.CreateUserInDB(customer, 0);
            return customer.CustomerId;
        }

        public static bool ValidateEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
            {
                return false;
            }

            string[] parts = email.Split('@');
            if (parts.Length != 2)
            {
                return false; // email must have exactly one @ symbol
            }

            string localPart = parts[0];
            string domainPart = parts[1];
            if (string.IsNullOrWhiteSpace(localPart) || string.IsNullOrWhiteSpace(domainPart))
            {
                return false; // local and domain parts cannot be empty
            }

            // check local part for valid characters
            foreach (char c in localPart)
            {
                if (!char.IsLetterOrDigit(c) && c != '.' && c != '_' && c != '-')
                {
                    return false; // local part contains invalid character
                }
            }

            // check domain part for valid format
            if (domainPart.Length < 2 || !domainPart.Contains(".") || domainPart.Split('.').Length != 2 || domainPart.EndsWith(".") || domainPart.StartsWith("."))
            {
                return false; // domain part is not a valid format
            }

            return true;
        }

        /*
         *  Two Weaknesses identified in this method
         *  
         *  1. 
         *  Identified as CWE-787
         *  1/10/2023 - Identified by Bibek Basnet
         *  1/10/2023 - Exploited by Bibek Basnet
         *  5/10/2023 - Patched and tested by Bibek Basnet
         *  
         *  2. 
         *  Identified as CWE-125
         *  1/10/2023 - Identified by Bibek Basnet
         *  1/10/2023 - Exploited by Bibek Basnet
         *  5/10/2023 - Patched and tested by Bibek Basnet
         *  
         */
        public static List<string> ListOfAccountBalance(string customerId)
        {
            // get the number of account
            SQLiteDB db = new SQLiteDB();
            List<string> accountNumbers = db.GetAllAccountsFromDB(customerId);
            List<string> balances = new List<string>();

            //Vulnerable Code - commented out
            /*for (int i = 0; i<=accountNumbers.Count; i++) 
            {
                balances[i] = accountNumbers[i] +"-"+ db.GetBalance(accountNumbers[i]); //CWE-787 & CWE-125
            }*/

            //Weakness resolved - fixed code
            for (int i = 0; i < accountNumbers.Count; i++)
            {
                balances.Add(accountNumbers[i] + "-" + db.GetBalance(accountNumbers[i]));
            }
            return balances;
        }
        public static void UpdateUser(string customerId, string name, string sName, string email, string govId)
        {
            SQLiteDB sql = new SQLiteDB();
            sql.UpdateCustomerDetailsInDB(customerId, name, sName, email, govId);
        }

        public static Customer DisplayUserDetails(string customerId)
        {
            SQLiteDB sql = new SQLiteDB();
            return sql.GetCustomerDetailsFromDB(customerId);
        }
        public static string RemoveCustomer(string customerId)
        {
            SQLiteDB sql = new SQLiteDB();
            Customer customer = sql.RemoveUser(customerId);
            return customer.CustomerId; // return the customer id of the user removed from the database
        }
        public static List<Customer> SearchCustomerByAccountNumber(string  accountNumber)
        {
            SQLiteDB sql = new SQLiteDB();
            List<Customer> customerList = new List<Customer>();

            List<string> customerIds = sql.GetCustomerIdFromDB(accountNumber);
            for (int i = 0; i < customerIds.Count; i++)
            {
                customerList.Add(sql.GetCustomerDetailsFromDB(customerIds[i]));
            }
            return customerList;
        }
    }

    public enum UserType { Customer, Admin}
}
