/*
* Disclaimer Ref#: 2023S2735-0-jR0L2p9QsVxGcY2uM5BfD5nHw
* This code is for assessment purposes only. 
* Any reuse of this code without permission is prohibited 
* and may result in academic integrity breach.
*/

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using TheVunerableApp.Model;

namespace TheVunerableApp.DataSource
{
    internal class LocalStore
    { 
        public LocalStore()
        {
            FilePath = AppDomain.CurrentDomain.BaseDirectory + ConfigurationManager.AppSettings["TRPath"];
        }
    
        public string FilePath { get; }

        /*
         * 10. CWE-476 Null Pointer Dereference
         * Identified as CWE-476
         * 
         * 
         */
        public bool StoreTransactions(Transaction transaction)
        {
            /* commented old code with vulnerability
            string transactionInJson = JsonSerializer.Serialize(transaction);
            string path = transaction.TransactionId + ".json";
            File.WriteAllText(Path.Combine(FilePath,path),transactionInJson);*/
            // new code with null check
            if (transaction != null)
            {
                string transactionInJson = JsonSerializer.Serialize(transaction);
                string path = transaction.TransactionId + ".json";
                File.WriteAllText(Path.Combine(FilePath, path), transactionInJson);
            }
            return true;
        }

        /*
        * 9. CWE-502: Deserialization of Untrusted Data
        * Identified as CWE-502
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        * 
        * 11. CWE-22: Improper Limitation of a Pathname to a Restricted Directory
        * Identified as CWE-22
        * Date - Identified by Name of the student Diwash Khanal 
        * Date - Exploited by Name of the student 
        * Date - Patched and tested by Name of the student
        */
        public Transaction LoadTransaction(string path)
        {
            /*
             * old code commented
             return JsonSerializer.Deserialize<Transaction>(path);
            */

            // new code resolving vulnerability
            try
            {
                string jsonString = File.ReadAllText(path);
                return JsonSerializer.Deserialize<Transaction>(jsonString);
            }
            catch (FileNotFoundException)
            {
                // Handle the file not found error
                Console.WriteLine($" File '{path}' not found.");
                return null;
            }
            catch (JsonException)
            {
                // Handle JSON deserialization error
                Console.WriteLine($"Invalid JSON format in '{path}'.");
                return null; 
            }
            catch (Exception)
            {
                Console.WriteLine("other errors");
                return null;
            }
        }
    }
}
